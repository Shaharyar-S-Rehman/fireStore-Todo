{"version":3,"sources":["firebase.js","components/Todo/todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","todoCol","collection","validationSchema","yup","title","required","id","a","deleteDoc","doc","RealtimeTodo","useState","todo","settodo","useEffect","q","query","orderBy","unsubscribe","onSnapshot","snapshot","temp","forEach","data","unshift","description","console","log","formik","useFormik","initialValues","onSubmit","values","addDoc","timestamp","serverTimestamp","docRef","error","Box","sx","flexGrow","m","Typography","variant","component","style","textAlign","textDecoration","textDecorationColor","color","handleSubmit","Stack","spacing","TextField","margin","width","label","name","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","fullWidth","type","map","eachTodo","i","backgroundColor","borderRadius","onClick","del","border","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8bbd059.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"\r\nimport { getFirestore } from \"firebase/firestore\"\r\n// import firebase from 'firebase';\r\nconst firebaseConfig ={\r\n    apiKey: \"AIzaSyAHrh6uaQJ9Z-45s3qvHrjbXZd4UKlGStQ\",\r\n    authDomain: \"todoapp-f629d.firebaseapp.com\",\r\n    projectId: \"todoapp-f629d\",\r\n    storageBucket: \"todoapp-f629d.appspot.com\",\r\n    messagingSenderId: \"621024607084\",\r\n    appId: \"1:621024607084:web:52781ff9c0c380e324d149\"\r\n  };\r\n  initializeApp(firebaseConfig)\r\n  export const db = getFirestore();\r\n  // export default db;","import { useFormik } from \"formik\";\r\nimport Box from '@mui/material/Box';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport * as yup from 'yup';\r\nimport { useEffect, useState } from \"react\"\r\nimport { collection, addDoc, onSnapshot, query, serverTimestamp, orderBy, deleteDoc, doc } from \"firebase/firestore\"\r\nimport { db } from '../../firebase'\r\nimport { color } from \"@mui/system\";\r\n\r\n\r\nconst todoCol = collection(db, \"todo\")\r\n\r\nconst validationSchema = yup.object({\r\n  title: yup\r\n    .string('Enter your email')\r\n    .required('Email is required'),\r\n});\r\n\r\nasync function del(id) {\r\n  await deleteDoc(doc(todoCol, id));\r\n}\r\n\r\nfunction RealtimeTodo() {\r\n  const [todo, settodo] = useState([])\r\n\r\n  useEffect(() => {\r\n\r\n    const q = query(todoCol, orderBy(\"timestamp\"));\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n\r\n      let temp = [];\r\n      snapshot.forEach((doc) => {\r\n\r\n        let id = doc.id;\r\n        let data = doc.data();\r\n\r\n        temp.unshift({\r\n          id: id,\r\n          title: data.title,\r\n          description: data.description\r\n        });\r\n      })\r\n      settodo(temp)\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe()\r\n      console.log(\"unsub\")\r\n    };\r\n  }, []);\r\n\r\n  const formik = useFormik({\r\n\r\n    initialValues: {\r\n      title: \"\",\r\n      description: \" \"\r\n    },\r\n    onSubmit: async (values) => {\r\n      try {\r\n        const docRef = await addDoc(todoCol, {\r\n          title: values.title,\r\n          description: values.description,\r\n          timestamp: serverTimestamp()\r\n        });\r\n        console.log(\"Document written with ID: \", docRef.id);\r\n      } catch (e) {\r\n        console.error(\"Error adding document: \", e);\r\n      }\r\n    },\r\n    validationSchema: validationSchema,\r\n  });\r\n\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, m: 2 }} >\r\n\r\n      <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n        <h1 style={{textAlign:\"center\", textDecoration:\" 5px solid underline\", textDecorationColor:\"orange\", color:\"whitesmoke\"}}> Todo</h1>\r\n      </Typography>\r\n\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <Stack spacing={2}>\r\n          <TextField\r\n          style={{margin:\"auto\", width:\"50%\",}}\r\n\r\n            color=\"secondary\"\r\n            id=\"outlined-basic\"\r\n            label=\"AddTodo\"\r\n            variant=\"outlined\"\r\n\r\n            name=\"title\"\r\n            value={formik.values.title}\r\n            onChange={formik.handleChange}\r\n\r\n            error={formik.touched.title && Boolean(formik.errors.title)}\r\n            helperText={formik.touched.title && formik.errors.title}\r\n          />\r\n<br />\r\n\r\n          {/* <TextField\r\n\r\n          style={{margin:\"auto\", width:\"50%\", }}\r\n\r\n            color=\"\"\r\n            id=\"filled-basic\"\r\n            label=\"\"\r\n            variant=\"filled\"\r\n\r\n            name=\"Add Todo\"\r\n            value={formik.values.description}\r\n            onChange={formik.handleChange}\r\n\r\n            error={formik.touched.description && Boolean(formik.errors.description)}\r\n            helperText={formik.touched.description && formik.errors.description}\r\n          /> */}\r\n<br />\r\n          <Button style={{margin:\"auto\", width:\"10%\"}} fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Add Todo</Button>\r\n        </Stack>\r\n<br />\r\n      </form>\r\n\r\n      <div>\r\n        {todo.map((eachTodo, i) => {\r\n\r\n          return (<>\r\n          <div key={i}  style={{ backgroundColor:\"white\", color:\"black\", borderRadius:\" 20px 20px 20px 20px \", margin:\"0 20% 0 20%\"}}>\r\n            <br />\r\n            {/* <div> id: {eachTodo.id}</div>\r\n            <div>{eachTodo.description} title: {eachTodo.title}</div> */}\r\n            <div>  {eachTodo.title} &nbsp; \r\n\r\n            <button onClick={() => { del(eachTodo.id) }} style={{backgroundColor:\"blue\", color:\"whitesmoke\", border:\"blue\"}}>Delete</button> \r\n            </div>\r\n            <br />\r\n          </div> <br />\r\n          </>)\r\n        })}\r\n\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default RealtimeTodo;","import './App.css';\n\nimport Todo from \"./components/Todo/todo\";\n\nfunction App() {\n\n\n  return (\n    <>\n      <div className=\"m-auto\" >\n        <Todo />\n      </div>\n    </>\n  )\n}\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import db from './firebase'\n// import firebase from 'firebase';\n\n// import { AddCircleOutlineRounded, DeleteOutlineRounded, Edit } from '@material-ui/icons';\n\n// import { Button, TextField, Container, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, Dialog, DialogContent, DialogActions } from '@material-ui/core';\n\n\n// function App() {\n\n//   const [todos, setTodos] = useState([]);\n//   const [input, setInput] = useState('');\n//   const [open, setOpen] = useState(false);\n//   const [update, setUpdate] = useState('');\n//   const [toUpdateId, setToUpdateId] = useState('');\n\n\n//   useEffect(() => {\n//     console.log('useEffect Hook!!!');\n\n//     db.collection('todos').orderBy('datetime', 'desc').onSnapshot(snapshot => {\n//       console.log('Firebase Snap!');\n//       setTodos(snapshot.docs.map(doc => {\n//         return {\n//           id: doc.id,\n//           name: doc.data().todo,\n//           datatime: doc.data().datatime\n//         }\n//       }))\n//     })\n\n//   }, []);\n\n//   const addTodo = (event) => {\n//     event.preventDefault();\n//     db.collection('todos').add({\n//       todo: input,\n//       datetime: firebase.firestore.FieldValue.serverTimestamp()\n//     })\n//     setInput('');\n//   }\n\n//   const deleteTodo = (id) => {\n//     db.collection('todos').doc(id).delete().then(res => {\n//       console.log('Deleted!', res);\n//     });\n//   }\n\n//   const openUpdateDialog = (todo) => {\n//     setOpen(true);\n//     setToUpdateId(todo.id);\n//     setUpdate(todo.name);\n//   }\n\n//   const editTodo = () => {\n//     db.collection('todos').doc(toUpdateId).update({\n//       todo: update\n//     });\n//     setOpen(false);\n//   }\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   return (\n//     <Container maxWidth=\"sm\">\n\n//       <form noValidate>\n\n//         <TextField\n//           variant=\"outlined\"\n//           margin=\"normal\"\n//           required\n//           fullWidth\n//           id=\"todo\"\n//           label=\"Enter ToDo\"\n//           name=\"todo\"\n//           autoFocus\n//           value={input}\n//           onChange={event => setInput(event.target.value)}\n//         />\n\n//         <Button\n//           type=\"submit\"\n//           variant=\"contained\"\n//           color=\"primary\"\n//           fullWidth\n//           onClick={addTodo}\n//           disabled={!input}\n//           startIcon={<AddCircleOutlineRounded />}\n//         >\n//           Add Todo\n//       </Button>\n\n//       </form>\n\n//       <List dense={true}>\n//         {\n//           todos.map(todo => (\n\n//             <ListItem key={todo.id} >\n\n//               <ListItemText\n//                 primary={todo.name}\n//                 secondary={todo.datetime}\n//               />\n\n//               <ListItemSecondaryAction>\n//                 <IconButton edge=\"end\" aria-label=\"Edit\" onClick={() => openUpdateDialog(todo)}>\n//                   <Edit />\n//                 </IconButton>\n//                 <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTodo(todo.id)}>\n//                   <DeleteOutlineRounded />\n//                 </IconButton>\n//               </ListItemSecondaryAction>\n\n//             </ListItem>\n//           ))\n//         }\n//       </List>\n\n//       <Dialog open={open} onClose={handleClose}>\n//         <DialogContent>\n//           <TextField\n//             autoFocus\n//             margin=\"normal\"\n//             label=\"Update Todo\"\n//             type=\"text\"\n//             fullWidth\n//             name=\"updateTodo\"\n//             value={update}\n//             onChange={event => setUpdate(event.target.value)}\n//           />\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={handleClose} color=\"primary\">\n//             Cancel\n//           </Button>\n//           <Button onClick={editTodo} color=\"primary\">\n//             Save\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n\n\n//     </Container >\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n// import './App.css';\n// import './App.css';\n// import {\n//   Switch,\n//   Route,\n//   useHistory\n// } from \"react-router-dom\";\n// import AppBar from '@mui/material/AppBar';\n// import Box from '@mui/material/Box';\n// import Toolbar from '@mui/material/Toolbar';\n// import Typography from '@mui/material/Typography';\n// import Button from '@mui/material/Button';\n\n// import Todo from \"./components/Todo/todo\";\n// // import RealtimeTodo from \"./components/realTimeTodo/realtimeTodo\";\n\n// function App() {\n//   let history = useHistory();\n\n//   return (\n//     <>\n//       <Box sx={{ flexGrow: 1 }}>\n//         <AppBar position=\"static\">\n//           <Toolbar>\n//             <Typography onClick={() => { history.push(\"/\") }} variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n//               Firestore Example\n//             </Typography>\n//             <Button color=\"inherit\" variant=\"text\" onClick={() => { history.push(\"/\") }}>Todo</Button>\n//             <Button color=\"inherit\" variant=\"text\" onClick={() => { history.push(\"/realtime\") }}>Real-Time Todo</Button>\n\n//           </Toolbar>\n//         </AppBar>\n\n//         <Switch>\n//           <Route exact path=\"/\">\n//             <Todo />\n//           </Route>\n\n//           <Route path=\"/realtime\">\n//             <RealtimeTodo />\n//           </Route>\n//         </Switch>\n//       </Box>\n//     </>\n//   )\n// }\n// export default App;\n\n\n\n\n// import { Formik, Field, Form, useFormik } from \"formik\";\n// import Stack from '@mui/material/Stack';\n// import TextField from '@mui/material/TextField';\n// import Button from '@mui/material/Button';\n// import * as yup from 'yup';\n// import  db  from \"firebase/firestore\"\n\n// import { collection, addDoc } from \"firebase/firestore\"; \n\n\n// // function doSomething(values) {\n// //   console.log(\"values: \", values)\n// // }\n// function onSubmitFunction(values) {\n//   console.log(\"values: \", values)\n\n//    onSubmit: async(values)=>{\n//      try {\n//     const docRef = await addDoc(collection(db, \"users\"), {\n//       first: \"Ada\",\n//       last: \"Lovelace\",\n//       born: 1815\n//     });\n//     console.log(\"Document written with ID: \", docRef.id);\n//   } catch (e) {\n//     console.error(\"Error adding document: \", e);\n//   }\n// }}\n\n// const validationSchema = yup.object({\n//   email: yup\n//     .string('Enter your email')\n//     .email('Enter a valid email')\n//     .required('Email is required'),\n//   password: yup\n//     .string('Enter your password')\n//     .min(8, 'Password should be of minimum 8 characters length')\n//     .max(10, 'No more then 10')\n//     .required('Password is required'),\n//   website: yup\n//     .string('Enter your password')\n//     .url(\"please enter valid URL e.g: https://somewebsite.com\")\n//     .required('Password is required'),\n// });\n\n\n// export default function App() {\n\n//   const formik = useFormik({\n//     validationSchema: validationSchema,\n//     initialValues: {\n//       website: '',\n//       email: '',\n//       password: '',\n//     },\n//     onSubmit: onSubmitFunction\n\n//   });\n\n\n//   return (\n//     <div style={{ padding: \"1rem\" }}>\n\n//       {/* <Formik\n//         initialValues={{ name: \"\", email: \"\" }}\n//         onSubmit={doSomething}\n//       >\n//         <Form>\n//           <Field name=\"name\" type=\"text\" />\n//           <Field name=\"email\" type=\"email\" />\n//           <button type=\"submit\">Submit</button>\n//         </Form>\n//       </Formik> */}\n\n\n//       <form onSubmit={formik.handleSubmit}>\n//         <Stack spacing={2}>\n//           <TextField\n//             fullWidth\n//             color=\"primary\"\n//             id=\"outlined-basic\"\n//             label=\"Outlined\"\n//             variant=\"outlined\"\n\n//             name=\"website\"\n//             value={formik.values.website}\n//             onChange={formik.handleChange}\n\n//             error={formik.touched.website && Boolean(formik.errors.website)}\n//             helperText={formik.touched.website && formik.errors.website}\n//           />\n\n//           <TextField\n//             fullWidth\n//             color=\"primary\"\n//             id=\"outlined-basic\"\n//             label=\"Outlined\"\n//             variant=\"outlined\"\n\n//             name=\"email\"\n//             value={formik.values.email}\n//             onChange={formik.handleChange}\n\n//             error={formik.touched.email && Boolean(formik.errors.email)}\n//             helperText={formik.touched.email && formik.errors.email}\n//           />\n\n//           <TextField\n//             fullWidth\n//             color=\"primary\"\n//             id=\"filled-basic\"\n//             label=\"Outlined\"\n//             variant=\"outlined\"\n//             type=\"password\"\n\n//             name=\"password\"\n//             value={formik.values.password}\n//             onChange={formik.handleChange}\n\n//             error={formik.touched.password && Boolean(formik.errors.password)}\n//             helperText={formik.touched.password && formik.errors.password}\n//           />\n\n//           <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">Button</Button>\n//         </Stack>\n\n//       </form>\n//     </div>\n//   );\n// }\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}